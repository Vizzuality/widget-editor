{"version":3,"sources":["modules/editor-options/actions.js","modules/editor-options/reducers.js","modules/editor-options/initial-state.js","store/index.js","components/debug-options/index.js","components/header.js","components/playground-renderer/index.js","components/playground-renderer/component.js","components/editor/component.js","components/editor/index.js","components/editor-form/useEditorForm.js","components/editor-form/index.js","components/editor-form/component.js","App.js","serviceWorker.js","index.js"],"names":["modifyOptions","createAction","actions","state","payload","authToken","unmounted","renderer","optionsOpen","compactMode","theme","color","dataset","datasets","label","value","initStore","initialState","appReducers","combineReducers","editorOptions","handleModule","reducers","middlewares","applyMiddleware","thunk","WEmiddleware","enhancers","composeWithDevTools","store","createStore","run","sagas","scheme","author","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","DebugOptions","useState","debugJSON","setDebugJSON","className","type","onClick","getEditorState","data","invertTheme","shouldExpandNode","_keyName","_data","level","Header","dispatch","useDispatch","useSelector","PlaygroundRendererComponent","widget","widgetEditor","widgetConfig","adapter","RwAdapter","thumbnail","SCHEMES","name","mainColor","category","Component","schemes","compact","datasetId","widgetId","onSave","diff","formatSavedJson","JSON","stringify","x","window","open","document","write","close","authenticated","application","disable","getAllWidgetsForDataset","a","fetch","response","json","map","d","attributes","id","console","error","active","setActive","autoFillValue","setAutoFillValue","prevAutoFillValue","useRef","widgets","autoFillError","hasAutoFillError","useCallback","allWidgets","useEffect","patch","handler","setTimeout","length","current","clearTimeout","find","isCustomDataset","item","useEditorForm","handleChangeDataset","handleChangeWidget","autoFill","e","target","onMouseEnter","onMouseLeave","htmlFor","onChange","autoComplete","placeholder","options","isClearable","App","configureStore","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fbae307.chunk.js","sourcesContent":["import { createAction } from \"vizzuality-redux-tools\";\n\nexport const modifyOptions = createAction(\"PLAYGROUND/modifyOptions\");\n\nexport default {\n  modifyOptions\n};\n","import * as actions from \"./actions\";\n\nexport default {\n  [actions.modifyOptions]: (state, { payload }) => ({\n    ...state,\n    ...payload\n  })\n};\n","export default {\n  authToken: \"\",\n  unmounted: false,\n  renderer: false,\n  optionsOpen: false,\n  compactMode: false,\n  // widget: \"c1d7cb83-5f50-43eb-8ea0-6f7ecd4e1b69\",\n  theme: { color: \"#C32D7B\" },\n  dataset: null,\n  datasets: [\n    { label: 'Forest Sector Economic Contribution', value: '03bfb30e-829f-4299-bab9-b2be1b66b5d4' },\n    { label: 'MAP LAYER 1', value: '852f2275-91a8-4500-9f10-89880dc53f22' },\n    { label: 'MAP LAYER 2', value: 'f8d3e79c-c3d0-4f9a-9b68-9c5ad1f025e4' },\n    { label: 'MAP LAYER 3', value: '266ed113-396c-4c69-885a-ead30df95810' },\n    { label: 'MAP LAYER 4', value: '0e565ddf-74fd-4f90-a6b8-c89d747a89ab' },\n    { label: 'Countries lacking access to electricity (urban)', value: '1ad53858-f5da-47cb-8006-5b4aa5aad589' },\n    { label: 'Global Power Plant Database', value: 'a86d906d-9862-4783-9e30-cdb68cd808b8' }\n  ]\n};\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport {\n  reducers,\n  middleware as WEmiddleware,\n  sagas,\n} from \"@widget-editor/widget-editor\";\n\nimport thunk from \"redux-thunk\";\n\n// import sagas from \"sagas\";\n\n// New modules\nimport { handleModule } from \"vizzuality-redux-tools\";\n\n// Modules\nimport * as editorOptions from \"modules/editor-options\";\n\nconst initStore = (initialState = {}) => {\n  const appReducers = combineReducers({\n    editorOptions: handleModule(editorOptions),\n    ...reducers,\n  });\n\n  const middlewares = applyMiddleware(thunk, WEmiddleware);\n  const enhancers = composeWithDevTools(middlewares);\n\n  // create store\n  const store = createStore(appReducers, initialState, enhancers);\n\n  WEmiddleware.run(sagas);\n\n  return { store };\n};\n\nexport default initStore;\n","import React, { useState } from 'react';\nimport JSONTree from 'react-json-tree'\n\nimport { RiEye2Line, RiCloseLine } from 'react-icons/ri';\n\nimport { getEditorState } from \"@widget-editor/widget-editor\";\n\nimport './styles.scss';\n\nconst theme = {\n  scheme: 'monokai',\n  author: 'wimer hazenberg (http://www.monokai.nl)',\n  base00: '#272822',\n  base01: '#383830',\n  base02: '#49483e',\n  base03: '#75715e',\n  base04: '#a59f85',\n  base05: '#f8f8f2',\n  base06: '#f5f4f1',\n  base07: '#f9f8f5',\n  base08: '#f92672',\n  base09: '#fd971f',\n  base0A: '#f4bf75',\n  base0B: '#a6e22e',\n  base0C: '#a1efe4',\n  base0D: '#66d9ef',\n  base0E: '#ae81ff',\n  base0F: '#cc6633'\n};\n\nconst DebugOptions = () => {\n  const [debugJSON, setDebugJSON] = useState(null);\n  return <div className=\"c-debug-options\">\n    <button type=\"button\" onClick={() => setDebugJSON(getEditorState())}>\n      <RiEye2Line /> Get Editor state\n    </button>\n    {debugJSON && <div className=\"debug-options--debug-view\">\n      <header className=\"debug-options--debug-view--header\">\n        Get editor state hook result\n        <button onClick={() => setDebugJSON(null)}><RiCloseLine /></button>\n      </header>\n      <div className=\"debug-options--debug-view--result\">\n        <JSONTree\n          data={debugJSON}\n          theme={theme}\n          invertTheme={true}\n          shouldExpandNode={(_keyName, _data, level) => level <= 2}\n        />\n      </div>\n    </div>}\n    {debugJSON && <div className=\"debug-options--debug-backdrop\" />}\n  </div>\n}\n\nexport default DebugOptions;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { RiLoginBoxLine, RiMistLine, RiPaletteLine } from 'react-icons/ri';\n\nimport DebugOption from \"components/debug-options\";\n\nconst modifyOptions = payload => ({\n  type: 'PLAYGROUND/modifyOptions',\n  payload\n});\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const renderer = useSelector(state => state.editorOptions.renderer);\n  const unmounted = useSelector(state => state.editorOptions.unmounted);\n\n  return (\n    <header className=\"App-header\">\n      Widget editor\n      <div className=\"App-header--nav\">\n        <button type=\"button\" onClick={() => dispatch(modifyOptions({ renderer: !renderer }))}>\n          {renderer ? <RiMistLine /> : <RiPaletteLine /> } {renderer ? \"View editor\" : \"View renderer\"}\n        </button>\n        <button type=\"button\" onClick={() => dispatch(modifyOptions({ unmounted: !unmounted }))}>\n          <RiLoginBoxLine />\n          {unmounted && 'Mount editor'}\n          {!unmounted && 'Un-mount editor'}\n        </button>\n        <DebugOption />\n      </div>\n    </header>\n  )\n}\n\nexport default Header;\n","import PlaygroundRendererComponent from \"./component\";\n\nexport default PlaygroundRendererComponent;\n","import React from \"react\";\nimport { useSelector } from 'react-redux'\n\nimport RwAdapter from \"@widget-editor/rw-adapter\";\nimport Renderer from \"@widget-editor/renderer\";\n\n// eslint-disable-next-line\nimport widgetTest from \"./test-widget\";\n\nconst PlaygroundRenderer = () => {\n  const widget = useSelector(state => {\n    return state.widgetEditor.widgetConfig;\n  });\n\n  if (!widget) {\n    return (\n      <div className=\"c-unmounted\">\n        <p>No modified styles found</p>\n        <span>Update your widget within the editor and your changes will be reflected here</span>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"column\">\n      <div className=\"c-widget-block\">\n        <div className=\"renderer-wrapper\">\n          <Renderer\n            adapter={RwAdapter}\n            thumbnail={false}\n            widgetConfig={widget}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlaygroundRenderer;\n","import React from \"react\";\nimport { useSelector } from 'react-redux'\n\nimport RwAdapter from \"@widget-editor/rw-adapter\";\nimport WidgetEditor from \"@widget-editor/widget-editor\";\n\nimport PlaygroundRenderer from 'components/playground-renderer';\n\nconst SCHEMES = [\n  {\n    name: \"default\",\n    mainColor: \"#3BB2D0\",\n    category: [\n      '#3BB2D0',\n      '#2C75B0',\n      '#FAB72E',\n      '#EF4848',\n      '#65B60D',\n      '#C32D7B',\n      '#F577B9',\n      '#5FD2B8',\n      '#F1800F',\n      '#9F1C00',\n      '#A5E9E3',\n      '#B9D765',\n      '#393F44',\n      '#CACCD0',\n      '#717171',\n    ],\n  },\n  {\n    name: \"pine\",\n    mainColor: \"#907A59\",\n    category: [\n      \"#907A59\",\n      \"#6AAC9F\",\n      \"#D5C0A1\",\n      \"#5C7D86\",\n      \"#F9AF38\",\n      \"#F05B3F\",\n      \"#89AD24\",\n      \"#CE4861\",\n      \"#F5808F\",\n      \"#86C48F\",\n      \"#F28627\",\n      \"#B23912\",\n      \"#BAD6AF\",\n      \"#C9C857\",\n      \"#665436\",\n    ],\n  },\n  {\n    name: \"wind\",\n    mainColor: \"#5A7598\",\n    category: [\n      \"#5A7598\",\n      \"#C1CCDC\",\n      \"#DBB86F\",\n      \"#B7597B\",\n      \"#5FAB55\",\n      \"#8D439E\",\n      \"#CD87CA\",\n      \"#6BC8CB\",\n      \"#C58857\",\n      \"#712932\",\n      \"#ACE3E9\",\n      \"#B1D193\",\n      \"#294260\",\n      \"#49ACDB\",\n      \"#2A75C3\",\n    ],\n  },\n];\n\nconst Editor = () => {\n  const { compactMode, dataset, widget, theme } = useSelector(state => state.editorOptions);\n  const renderer = useSelector(state => state.editorOptions.renderer);\n  const unmounted = useSelector(state => state.editorOptions.unmounted);\n\n  const handleOnSave = diff => {\n    const formatSavedJson = JSON.stringify(diff, null, 2);\n    const x = window.open();\n    x.document.open();\n    x.document.write(\n      \"<html><body><pre>\" + formatSavedJson + \"</pre></body></html>\"\n    );\n    x.document.close();\n  }\n\n  if (!dataset) {\n    return <p className=\"generic-playground-errror\">Please select a dataset</p>;\n  }\n\n  if (unmounted) {\n    return (\n      <div className=\"c-unmounted\">\n        <p>Editor is unmounted.</p>\n        <span>Redux dev tools wont show updates, so if you need to debug redux you need to refresh your browser. But in this context you can make sure that the editor does not crash and cancels all necessary events when un-mounting the editor.</span>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      {renderer && <PlaygroundRenderer />}\n      <div className={`widget-editor-wrapper ${renderer ? '-hidden' : ''}`}>\n        <WidgetEditor\n          schemes={SCHEMES}\n          compact={compactMode}\n          datasetId={dataset}\n          widgetId={widget}\n          onSave={handleOnSave}\n          authenticated={true}\n          application=\"rw\"\n          adapter={RwAdapter}\n          theme={theme}\n          disable={['typography']}\n        />\n      </div>\n    </>\n  );\n\n};\n\nexport default Editor;\n","import Component from \"./component\";\n\nexport default Component;\n","import { useState, useEffect, useRef, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst getAllWidgetsForDataset = async datasetId => {\n  try {\n    const response = await fetch(`https://api.resourcewatch.org/v1/dataset/${datasetId}/widget`);\n    const { data } = await response.json();\n    return data.map(d => ({\n      label: d.attributes.name,\n      value: d.id\n    }));\n  } catch (e) {\n     console.error('(Playground) failed to fetch widgets')\n  }\n}\n\nconst modifyOptions = payload => ({\n  type: 'PLAYGROUND/modifyOptions',\n  payload\n});\n\nexport default function useEditorForm(autoFillValue) {\n  // Store previous auto fill value so we don't add it on first run\n  const prevAutoFillValue = useRef();\n\n  // Get elements from store\n  const dispatch = useDispatch();\n  const datasets = useSelector(state => state.editorOptions.datasets);\n  const widgets = useSelector(state => state.editorOptions.widgets);\n\n  // Store auto fill error that we will display in UI\n  const [autoFillError, hasAutoFillError] = useState(false);\n\n  // Initial desired state of our form\n  const initialState = useCallback(async () => {\n    const datasetId = datasets[0].value;\n    const allWidgets = await getAllWidgetsForDataset(datasetId);\n    dispatch(modifyOptions({\n      dataset: datasets[0].value,\n      widgets: allWidgets,\n      widget: null\n    }));\n  }, [datasets, dispatch])\n\n  // If we don't have a dataset when initialising the playground, add the first\n  useEffect(() => {\n    const patch = async () => {\n      await initialState();\n    }\n    if (!dataset) {\n      patch();\n    }\n  }, []); // eslint-disable-line\n\n  // When autofill value changes apply desired dataset/widget\n  // if autofill is empty apply initial state\n  useEffect(() => {\n    const handler = setTimeout(async () => {\n      if (autoFillValue.length > 0) {\n        try {\n          const response = await fetch(autoFillValue);\n          const { data } = await response.json();\n          if (data.type === 'widget') {\n            const allWidgets = await getAllWidgetsForDataset(data.attributes.dataset);\n            dispatch(modifyOptions({\n              dataset: data.attributes.dataset,\n              widget: data.id,\n              widgets: allWidgets\n            }))\n          }\n          if (data.type === 'dataset') {\n            const allWidgets = await getAllWidgetsForDataset(data.id);\n            dispatch(modifyOptions({\n              dataset: data.id,\n              widget: null,\n              widgets: allWidgets\n            }))\n          }\n          hasAutoFillError(false);\n        } catch (e) {\n          console.error('(Playground) failed to fetch widgets')\n          hasAutoFillError(true);\n        }\n      }\n      if (autoFillValue.length === 0 && prevAutoFillValue.current) {\n        await initialState();\n      }\n      prevAutoFillValue.current = autoFillValue;\n    }, 500);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [autoFillValue, datasets, dispatch, initialState])\n\n  // Some selectors for getting the correct dataset and widget\n  const dataset = useSelector(state => {\n    const { editorOptions: { datasets, dataset } } = state;\n    const selected = datasets.find(d => d.value === dataset);\n    return selected || '';\n  });\n\n  const widget = useSelector(state => {\n    const { editorOptions: { widgets, widget } } = state;\n    if (!widget) {\n      return '';\n    }\n    const selected = widgets.find(d => d.value === widget);\n    return selected || '';\n  });\n\n  // If our dataset is not pre-defined, display \"custom dataset\" in select\n  const isCustomDataset = !datasets.find(d => d.value === dataset.value);\n\n  // Event handlers for select inputs\n  const handleChangeDataset = async (item) => {\n    if (item?.value) {\n      const allWidgets = await getAllWidgetsForDataset(item.value);\n      dispatch(modifyOptions({\n        dataset: item.value,\n        widgets: allWidgets\n      }))\n    } else {\n      dispatch(modifyOptions({\n        dataset: null,\n        widgets: null,\n        widget: null\n      }))\n    }\n  }\n\n  const handleChangeWidget = async (item) => {\n    dispatch(modifyOptions({\n      widget: item.value\n    }))\n  }\n\n  return [\n    datasets,\n    widgets,\n    dataset,\n    widget,\n    isCustomDataset,\n    autoFillError,\n    handleChangeDataset,\n    handleChangeWidget\n  ]\n}\n","import Component from './component';\n\nexport default Component;\n","import React, { useState } from 'react';\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\n\nimport useEditorForm from './useEditorForm';\n\nimport './style.scss';\n\nconst EditorForm = () => {\n  const [active, setActive] = useState(false);\n  const [autoFillValue, setAutoFillValue] = useState('');\n\n  const [\n    datasets,\n    widgets,\n    dataset,\n    widget,\n    isCustomDataset,\n    autoFillError,\n    handleChangeDataset,\n    handleChangeWidget\n  ] = useEditorForm(autoFillValue);\n\n  const autoFill = async e => {\n    const { value } = e.target;\n    setAutoFillValue(value);\n  }\n\n  const datasetValue = () => {\n    if (!dataset) {\n      return null;\n    }\n    if (isCustomDataset) {\n      return { label: 'Custom dataset', value: dataset ? dataset.value : '' };\n    }\n    return dataset || '';\n  }\n\n  const datasetOptions = () => {\n    return [\n      ...datasets,\n      (isCustomDataset && dataset && { label: 'Custom dataset', value: dataset.value })\n    ]\n  }\n\n  return (\n    <div\n      className={`c-editor-form ${active ? '-active' : ''}`}\n      onMouseEnter={() => setActive(true)}\n      onMouseLeave={() => setActive(false)}\n    >\n      <div className=\"input\">\n        <label htmlFor=\"smart-fill\">Auto fill: enter a resoucewatch widget or dataset api endpoint and auto fill details</label>\n        <input\n          value={autoFillValue}\n          onChange={autoFill}\n          autoComplete=\"off\"\n          className=\"text-input\"\n          type=\"text\"\n          placeholder=\"Paste here\"\n        />\n        {autoFillValue.length > 0 && autoFillError && <p className=\"error\">Failed to autofill</p>}\n      </div>\n      <div className=\"input\">\n        <label htmlFor=\"dataset\">Dataset</label>\n        <CreatableSelect\n          value={datasetValue()}\n          onChange={handleChangeDataset}\n          name=\"dataset\"\n          options={datasetOptions()}\n          isClearable\n        />\n      </div>\n      <div className=\"input\">\n        <label htmlFor=\"widget\">Widget</label>\n        <Select\n          value={widget || ''}\n          onChange={handleChangeWidget}\n          name=\"widget\"\n          options={widgets || []}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default EditorForm;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport configureStore from \"store\";\n\nimport Header from \"components/header\";\nimport Editor from \"./components/editor\";\nimport EditorForm from \"components/editor-form\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  const { store } = configureStore();\n\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Header />\n        <EditorForm />\n        <Editor />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}